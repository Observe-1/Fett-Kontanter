{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as shape from \"d3-shape\";\nimport { scaleLinear } from \"d3-scale\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { parse } from \"react-native-redash\";\nimport data from \"./data.json\";\nexport var SIZE = Dimensions.get(\"window\").width;\nvar values = data.data.prices;\nvar POINTS = 60;\n\nvar buildGraph = function buildGraph(datapoints, label) {\n  var priceList = datapoints.prices.slice(0, POINTS);\n  var formattedValues = priceList.map(function (price) {\n    return [parseFloat(price[0]), price[1]];\n  });\n  var prices = formattedValues.map(function (value) {\n    return value[0];\n  });\n  var dates = formattedValues.map(function (value) {\n    return value[1];\n  });\n  var scaleX = scaleLinear().domain([Math.min.apply(Math, _toConsumableArray(dates)), Math.max.apply(Math, _toConsumableArray(dates))]).range([0, SIZE]);\n  var minPrice = Math.min.apply(Math, _toConsumableArray(prices));\n  var maxPrice = Math.max.apply(Math, _toConsumableArray(prices));\n  var scaleY = scaleLinear().domain([minPrice, maxPrice]).range([SIZE, 0]);\n  return {\n    label: label,\n    minPrice: minPrice,\n    maxPrice: maxPrice,\n    percentChange: datapoints.percent_change,\n    path: parse(shape.line().x(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          x = _ref2[1];\n\n      return scaleX(x);\n    }).y(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          y = _ref4[0];\n\n      return scaleY(y);\n    }).curve(shape.curveBasis)(formattedValues))\n  };\n};\n\nexport var graphs = [{\n  label: \"1H\",\n  value: 0,\n  data: buildGraph(values.hour, \"Last Hour\")\n}, {\n  label: \"1D\",\n  value: 1,\n  data: buildGraph(values.day, \"Today\")\n}, {\n  label: \"1M\",\n  value: 2,\n  data: buildGraph(values.month, \"Last Month\")\n}, {\n  label: \"1Y\",\n  value: 3,\n  data: buildGraph(values.year, \"This Year\")\n}, {\n  label: \"all\",\n  value: 4,\n  data: buildGraph(values.all, \"All time\")\n}];\nexport var GraphIndex = 0 | 1 | 2 | 3 | 4;","map":{"version":3,"sources":["C:/Users/Adil/Documents/Financial/Components/Model.js"],"names":["shape","scaleLinear","parse","data","SIZE","Dimensions","get","width","values","prices","POINTS","buildGraph","datapoints","label","priceList","slice","formattedValues","map","price","parseFloat","value","dates","scaleX","domain","Math","min","max","range","minPrice","maxPrice","scaleY","percentChange","percent_change","path","line","x","y","curve","curveBasis","graphs","hour","day","month","year","all","GraphIndex"],"mappings":"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","sourcesContent":["import * as shape from \"d3-shape\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { Dimensions } from \"react-native\";\r\nimport { parse } from \"react-native-redash\";\r\n\r\nimport data from \"./data.json\";\r\n\r\nexport const SIZE = Dimensions.get(\"window\").width;\r\n\r\nconst values = data.data.prices;\r\nconst POINTS = 60;\r\n\r\nconst buildGraph = (datapoints, label) => {\r\n  const priceList = datapoints.prices.slice(0, POINTS);\r\n  const formattedValues = priceList.map(\r\n    (price) => [parseFloat(price[0]), price[1]]\r\n  );\r\n  const prices = formattedValues.map((value) => value[0]);\r\n  const dates = formattedValues.map((value) => value[1]);\r\n  const scaleX = scaleLinear()\r\n    .domain([Math.min(...dates), Math.max(...dates)])\r\n    .range([0, SIZE]);\r\n  const minPrice = Math.min(...prices);\r\n  const maxPrice = Math.max(...prices);\r\n  const scaleY = scaleLinear().domain([minPrice, maxPrice]).range([SIZE, 0]);\r\n  return {\r\n    label,\r\n    minPrice,\r\n    maxPrice,\r\n    percentChange: datapoints.percent_change,\r\n    path: parse(\r\n      shape\r\n        .line()\r\n        .x(([, x]) => scaleX(x))\r\n        .y(([y]) => scaleY(y))\r\n        .curve(shape.curveBasis)(formattedValues)\r\n    ),\r\n  };\r\n};\r\n\r\nexport const graphs = [\r\n  {\r\n    label: \"1H\",\r\n    value: 0,\r\n    data: buildGraph(values.hour, \"Last Hour\"),\r\n  },\r\n  {\r\n    label: \"1D\",\r\n    value: 1,\r\n    data: buildGraph(values.day, \"Today\"),\r\n  },\r\n  {\r\n    label: \"1M\",\r\n    value: 2,\r\n    data: buildGraph(values.month, \"Last Month\"),\r\n  },\r\n  {\r\n    label: \"1Y\",\r\n    value: 3,\r\n    data: buildGraph(values.year, \"This Year\"),\r\n  },\r\n  {\r\n    label: \"all\",\r\n    value: 4,\r\n    data: buildGraph(values.all, \"All time\"),\r\n  },\r\n];\r\n\r\nexport const GraphIndex = 0 | 1 | 2 | 3 | 4;"]},"metadata":{},"sourceType":"module"}