{"ast":null,"code":"import Animated, { interpolate } from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\nimport { cartesian2Polar } from \"./Coordinates\";\nimport { cubicBezierYForX } from \"./Math\";\nexport var serialize = function () {\n  var _f = function _f(path) {\n    return \"M\" + path.move.x + \",\" + path.move.y + \" \" + path.curves.map(function (c) {\n      return \"C\" + c.c1.x + \",\" + c.c1.y + \" \" + c.c2.x + \",\" + c.c2.y + \" \" + c.to.x + \",\" + c.to.y;\n    }).join(\" \") + (path.close ? \"Z\" : \"\");\n  };\n\n  _f._closure = {};\n  _f.asString = \"function serialize(path){return\\\"M\\\"+path.move.x+\\\",\\\"+path.move.y+\\\" \\\"+path.curves.map(function(c){return\\\"C\\\"+c.c1.x+\\\",\\\"+c.c1.y+\\\" \\\"+c.c2.x+\\\",\\\"+c.c2.y+\\\" \\\"+c.to.x+\\\",\\\"+c.to.y;}).join(\\\" \\\")+(path.close?\\\"Z\\\":\\\"\\\");}\";\n  _f.__workletHash = 6511175714632;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var parse = function parse(d) {\n  var segments = normalizeSVG(absSVG(parseSVG(d)));\n  var path = createPath({\n    x: segments[0][1],\n    y: segments[0][2]\n  });\n  segments.forEach(function (segment) {\n    if (segment[0] === \"Z\") {\n      close(path);\n    } else if (segment[0] === \"C\") {\n      addCurve(path, {\n        c1: {\n          x: segment[1],\n          y: segment[2]\n        },\n        c2: {\n          x: segment[3],\n          y: segment[4]\n        },\n        to: {\n          x: segment[5],\n          y: segment[6]\n        }\n      });\n    }\n  });\n  return path;\n};\nexport var interpolatePath = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var extrapolate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Animated.Extrapolate.CLAMP;\n    var path = {\n      move: {\n        x: interpolate(value, inputRange, outputRange.map(function (p) {\n          return p.move.x;\n        }), extrapolate),\n        y: interpolate(value, inputRange, outputRange.map(function (p) {\n          return p.move.y;\n        }), extrapolate)\n      },\n      curves: outputRange[0].curves.map(function (_, index) {\n        return {\n          c1: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c1.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c1.y;\n            }), extrapolate)\n          },\n          c2: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c2.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].c2.y;\n            }), extrapolate)\n          },\n          to: {\n            x: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].to.x;\n            }), extrapolate),\n            y: interpolate(value, inputRange, outputRange.map(function (p) {\n              return p.curves[index].to.y;\n            }), extrapolate)\n          }\n        };\n      }),\n      close: outputRange[0].close\n    };\n    return serialize(path);\n  };\n\n  _f._closure = {\n    Animated: {\n      Extrapolate: {\n        CLAMP: Animated.Extrapolate.CLAMP\n      }\n    },\n    interpolate: interpolate,\n    serialize: serialize\n  };\n  _f.asString = \"function interpolatePath(value,inputRange,outputRange){const{Animated,interpolate,serialize}=jsThis._closure;{var extrapolate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Animated.Extrapolate.CLAMP;var path={move:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.move.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.move.y;}),extrapolate)},curves:outputRange[0].curves.map(function(_,index){return{c1:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c1.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c1.y;}),extrapolate)},c2:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c2.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].c2.y;}),extrapolate)},to:{x:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].to.x;}),extrapolate),y:interpolate(value,inputRange,outputRange.map(function(p){return p.curves[index].to.y;}),extrapolate)}};}),close:outputRange[0].close};return serialize(path);}}\";\n  _f.__workletHash = 2067999254256;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var mixPath = function () {\n  var _f = function _f(value, p1, p2) {\n    var extrapolate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Animated.Extrapolate.CLAMP;\n    return interpolatePath(value, [0, 1], [p1, p2], extrapolate);\n  };\n\n  _f._closure = {\n    Animated: {\n      Extrapolate: {\n        CLAMP: Animated.Extrapolate.CLAMP\n      }\n    },\n    interpolatePath: interpolatePath\n  };\n  _f.asString = \"function mixPath(value,p1,p2){const{Animated,interpolatePath}=jsThis._closure;{var extrapolate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Animated.Extrapolate.CLAMP;return interpolatePath(value,[0,1],[p1,p2],extrapolate);}}\";\n  _f.__workletHash = 1615030869398;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var createPath = function () {\n  var _f = function _f(move) {\n    return {\n      move: move,\n      curves: [],\n      close: false\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function createPath(move){return{move:move,curves:[],close:false};}\";\n  _f.__workletHash = 14928498416510;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var addArc = function () {\n  var _f = function _f(path, corner, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    var arc = 9 / 16;\n    path.curves.push({\n      c1: {\n        x: (corner.x - from.x) * arc + from.x,\n        y: (corner.y - from.y) * arc + from.y\n      },\n      c2: {\n        x: (corner.x - to.x) * arc + to.x,\n        y: (corner.y - to.y) * arc + to.y\n      },\n      to: to\n    });\n  };\n\n  _f._closure = {};\n  _f.asString = \"function addArc(path,corner,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;var arc=9/16;path.curves.push({c1:{x:(corner.x-from.x)*arc+from.x,y:(corner.y-from.y)*arc+from.y},c2:{x:(corner.x-to.x)*arc+to.x,y:(corner.y-to.y)*arc+to.y},to:to});}\";\n  _f.__workletHash = 7717658052260;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var addCurve = function () {\n  var _f = function _f(path, c) {\n    path.curves.push({\n      c1: c.c1,\n      c2: c.c2,\n      to: c.to\n    });\n  };\n\n  _f._closure = {};\n  _f.asString = \"function addCurve(path,c){path.curves.push({c1:c.c1,c2:c.c2,to:c.to});}\";\n  _f.__workletHash = 12524308058506;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var addLine = function () {\n  var _f = function _f(path, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    path.curves.push({\n      c1: from,\n      c2: to,\n      to: to\n    });\n  };\n\n  _f._closure = {};\n  _f.asString = \"function addLine(path,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;path.curves.push({c1:from,c2:to,to:to});}\";\n  _f.__workletHash = 4466488744766;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var addQuadraticCurve = function () {\n  var _f = function _f(path, cp, to) {\n    var last = path.curves[path.curves.length - 1];\n    var from = last ? last.to : path.move;\n    path.curves.push({\n      c1: {\n        x: from.x / 3 + 2 / 3 * cp.x,\n        y: from.y / 3 + 2 / 3 * cp.y\n      },\n      c2: {\n        x: to.x / 3 + 2 / 3 * cp.x,\n        y: to.y / 3 + 2 / 3 * cp.y\n      },\n      to: to\n    });\n  };\n\n  _f._closure = {};\n  _f.asString = \"function addQuadraticCurve(path,cp,to){var last=path.curves[path.curves.length-1];var from=last?last.to:path.move;path.curves.push({c1:{x:from.x/3+2/3*cp.x,y:from.y/3+2/3*cp.y},c2:{x:to.x/3+2/3*cp.x,y:to.y/3+2/3*cp.y},to:to});}\";\n  _f.__workletHash = 15214855098425;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var close = function () {\n  var _f = function _f(path) {\n    path.close = true;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function close(path){path.close=true;}\";\n  _f.__workletHash = 6388902332060;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar curveIsFound = function () {\n  var _f = function _f(c) {\n    return c.curve !== null;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function curveIsFound(c){return c.curve!==null;}\";\n  _f.__workletHash = 16087677445003;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var selectCurve = function () {\n  var _f = function _f(path, x) {\n    var result = {\n      from: path.move,\n      curve: null\n    };\n\n    for (var i = 0; i < path.curves.length; i++) {\n      var c = path.curves[i];\n      var contains = result.from.x > c.to.x ? x >= c.to.x && x <= result.from.x : x >= result.from.x && x <= c.to.x;\n\n      if (contains) {\n        result.curve = c;\n        break;\n      }\n\n      result.from = c.to;\n    }\n\n    if (!curveIsFound(result)) {\n      throw new Error(\"No curve found at \" + x);\n    }\n\n    return result;\n  };\n\n  _f._closure = {\n    curveIsFound: curveIsFound\n  };\n  _f.asString = \"function selectCurve(path,x){const{curveIsFound}=jsThis._closure;{var result={from:path.move,curve:null};for(var i=0;i<path.curves.length;i++){var c=path.curves[i];var contains=result.from.x>c.to.x?x>=c.to.x&&x<=result.from.x:x>=result.from.x&&x<=c.to.x;if(contains){result.curve=c;break;}result.from=c.to;}if(!curveIsFound(result)){throw new Error(\\\"No curve found at \\\"+x);}return result;}}\";\n  _f.__workletHash = 9734339148444;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var getYForX = function () {\n  var _f = function _f(path, x) {\n    var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var c = selectCurve(path, x);\n    return cubicBezierYForX(x, c.from, c.curve.c1, c.curve.c2, c.curve.to, precision);\n  };\n\n  _f._closure = {\n    selectCurve: selectCurve,\n    cubicBezierYForX: cubicBezierYForX\n  };\n  _f.asString = \"function getYForX(path,x){const{selectCurve,cubicBezierYForX}=jsThis._closure;{var precision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;var c=selectCurve(path,x);return cubicBezierYForX(x,c.from,c.curve.c1,c.curve.c2,c.curve.to,precision);}}\";\n  _f.__workletHash = 17099318118749;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar controlPoint = function () {\n  var _f = function _f(current, previous, next, reverse, smoothing) {\n    var p = previous || current;\n    var n = next || current;\n    var lengthX = n.x - p.x;\n    var lengthY = n.y - p.y;\n    var o = cartesian2Polar({\n      x: lengthX,\n      y: lengthY\n    });\n    var angle = o.theta + (reverse ? Math.PI : 0);\n    var length = o.radius * smoothing;\n    var x = current.x + Math.cos(angle) * length;\n    var y = current.y + Math.sin(angle) * length;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  _f._closure = {\n    cartesian2Polar: cartesian2Polar\n  };\n  _f.asString = \"function controlPoint(current,previous,next,reverse,smoothing){const{cartesian2Polar}=jsThis._closure;{var p=previous||current;var n=next||current;var lengthX=n.x-p.x;var lengthY=n.y-p.y;var o=cartesian2Polar({x:lengthX,y:lengthY});var angle=o.theta+(reverse?Math.PI:0);var length=o.radius*smoothing;var x=current.x+Math.cos(angle)*length;var y=current.y+Math.sin(angle)*length;return{x:x,y:y};}}\";\n  _f.__workletHash = 6183874827311;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\n\nexport var curveLines = function () {\n  var _f = function _f(points, smoothing, strategy) {\n    var path = createPath(points[0]);\n\n    for (var i = 0; i < points.length; i++) {\n      if (i === 0) {\n        continue;\n      }\n\n      var point = points[i];\n      var next = points[i + 1];\n      var prev = points[i - 1];\n      var cps = controlPoint(prev, points[i - 2], point, false, smoothing);\n      var cpe = controlPoint(point, prev, next, true, smoothing);\n\n      switch (strategy) {\n        case \"simple\":\n          var cp = {\n            x: (cps.x + cpe.x) / 2,\n            y: (cps.y + cpe.y) / 2\n          };\n          addQuadraticCurve(path, cp, point);\n          break;\n\n        case \"bezier\":\n          var p0 = points[i - 2] || prev;\n          var p1 = points[i - 1];\n          var cp1x = (2 * p0.x + p1.x) / 3;\n          var cp1y = (2 * p0.y + p1.y) / 3;\n          var cp2x = (p0.x + 2 * p1.x) / 3;\n          var cp2y = (p0.y + 2 * p1.y) / 3;\n          var cp3x = (p0.x + 4 * p1.x + point.x) / 6;\n          var cp3y = (p0.y + 4 * p1.y + point.y) / 6;\n          path.curves.push({\n            c1: {\n              x: cp1x,\n              y: cp1y\n            },\n            c2: {\n              x: cp2x,\n              y: cp2y\n            },\n            to: {\n              x: cp3x,\n              y: cp3y\n            }\n          });\n\n          if (i === points.length - 1) {\n            path.curves.push({\n              to: points[points.length - 1],\n              c1: points[points.length - 1],\n              c2: points[points.length - 1]\n            });\n          }\n\n          break;\n\n        case \"complex\":\n          path.curves.push({\n            to: point,\n            c1: cps,\n            c2: cpe\n          });\n          break;\n\n        default:\n          exhaustiveCheck(strategy);\n      }\n    }\n\n    return path;\n  };\n\n  _f._closure = {\n    createPath: createPath,\n    controlPoint: controlPoint,\n    addQuadraticCurve: addQuadraticCurve,\n    exhaustiveCheck: exhaustiveCheck\n  };\n  _f.asString = \"function curveLines(points,smoothing,strategy){const{createPath,controlPoint,addQuadraticCurve,exhaustiveCheck}=jsThis._closure;{var path=createPath(points[0]);for(var i=0;i<points.length;i++){if(i===0){continue;}var point=points[i];var next=points[i+1];var prev=points[i-1];var cps=controlPoint(prev,points[i-2],point,false,smoothing);var cpe=controlPoint(point,prev,next,true,smoothing);switch(strategy){case\\\"simple\\\":var cp={x:(cps.x+cpe.x)/2,y:(cps.y+cpe.y)/2};addQuadraticCurve(path,cp,point);break;case\\\"bezier\\\":var p0=points[i-2]||prev;var p1=points[i-1];var cp1x=(2*p0.x+p1.x)/3;var cp1y=(2*p0.y+p1.y)/3;var cp2x=(p0.x+2*p1.x)/3;var cp2y=(p0.y+2*p1.y)/3;var cp3x=(p0.x+4*p1.x+point.x)/6;var cp3y=(p0.y+4*p1.y+point.y)/6;path.curves.push({c1:{x:cp1x,y:cp1y},c2:{x:cp2x,y:cp2y},to:{x:cp3x,y:cp3y}});if(i===points.length-1){path.curves.push({to:points[points.length-1],c1:points[points.length-1],c2:points[points.length-1]});}break;case\\\"complex\\\":path.curves.push({to:point,c1:cps,c2:cpe});break;default:exhaustiveCheck(strategy);}}return path;}}\";\n  _f.__workletHash = 4521352181802;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Paths.ts"],"names":["serialize","path","c","parse","segments","normalizeSVG","absSVG","parseSVG","createPath","x","y","segment","close","addCurve","c1","c2","to","interpolatePath","extrapolate","Animated","CLAMP","move","interpolate","outputRange","p","curves","mixPath","addArc","last","from","arc","corner","addLine","addQuadraticCurve","cp","curveIsFound","selectCurve","result","curve","i","contains","getYForX","precision","cubicBezierYForX","controlPoint","previous","n","next","lengthX","lengthY","o","cartesian2Polar","angle","reverse","Math","length","current","exhaustiveCheck","curveLines","points","point","prev","cps","cpe","p0","p1","cp1x","cp1y","cp2x","cp2y","cp3x","cp3y"],"mappings":"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","sourcesContent":["import Animated, { interpolate } from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\n\nimport { Vector } from \"./Vectors\";\nimport { cartesian2Polar } from \"./Coordinates\";\nimport { cubicBezierYForX } from \"./Math\";\n\ntype SVGCloseCommand = [\"Z\"];\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [\n  SVGMoveCommand,\n  ...(SVGCurveCommand | SVGCloseCommand)[]\n];\n\ninterface Curve {\n  to: Vector;\n  c1: Vector;\n  c2: Vector;\n}\n\nexport type Path = {\n  move: Vector;\n  curves: Curve[];\n  close: boolean;\n};\n\n/**\n * @summary Serialize a path into an SVG path string\n * @worklet\n */\nexport const serialize = (path: Path) => {\n  \"worklet\";\n  return `M${path.move.x},${path.move.y} ${path.curves\n    .map((c) => `C${c.c1.x},${c.c1.y} ${c.c2.x},${c.c2.y} ${c.to.x},${c.to.y}`)\n    .join(\" \")}${path.close ? \"Z\" : \"\"}`;\n};\n\n/**\n * @description ⚠️ this function cannot run on the UI thread. It must be executed on the JS thread\n * @summary Parse an SVG path into a sequence of Bèzier curves.\n * The SVG is normalized to have absolute values and to be approximated to a sequence of Bèzier curves.\n */\nexport const parse = (d: string): Path => {\n  const segments: SVGNormalizedCommands = normalizeSVG(absSVG(parseSVG(d)));\n  const path = createPath({ x: segments[0][1], y: segments[0][2] });\n  segments.forEach((segment) => {\n    if (segment[0] === \"Z\") {\n      close(path);\n    } else if (segment[0] === \"C\") {\n      addCurve(path, {\n        c1: {\n          x: segment[1],\n          y: segment[2],\n        },\n        c2: {\n          x: segment[3],\n          y: segment[4],\n        },\n        to: {\n          x: segment[5],\n          y: segment[6],\n        },\n      });\n    }\n  });\n  return path;\n};\n\n/**\n * @summary Interpolate between paths.\n * @worklet\n */\nexport const interpolatePath = (\n  value: number,\n  inputRange: number[],\n  outputRange: Path[],\n  extrapolate = Animated.Extrapolate.CLAMP\n) => {\n  \"worklet\";\n  const path = {\n    move: {\n      x: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.x),\n        extrapolate\n      ),\n      y: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.y),\n        extrapolate\n      ),\n    },\n    curves: outputRange[0].curves.map((_, index) => ({\n      c1: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.y),\n          extrapolate\n        ),\n      },\n      c2: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.y),\n          extrapolate\n        ),\n      },\n      to: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.y),\n          extrapolate\n        ),\n      },\n    })),\n    close: outputRange[0].close,\n  };\n  return serialize(path);\n};\n\n/**\n * @summary Interpolate two paths with an animation value that goes from 0 to 1\n * @worklet\n */\nexport const mixPath = (\n  value: number,\n  p1: Path,\n  p2: Path,\n  extrapolate = Animated.Extrapolate.CLAMP\n) => {\n  \"worklet\";\n  return interpolatePath(value, [0, 1], [p1, p2], extrapolate);\n};\n\n/**\n * @summary Create a new path\n * @worklet\n */\nexport const createPath = (move: Vector): Path => {\n  \"worklet\";\n  return {\n    move,\n    curves: [],\n    close: false,\n  };\n};\n\n/**\n * @summary Add an arc command to a path\n * @worklet\n */\nexport const addArc = (path: Path, corner: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  const arc = 9 / 16;\n  path.curves.push({\n    c1: {\n      x: (corner.x - from.x) * arc + from.x,\n      y: (corner.y - from.y) * arc + from.y,\n    },\n    c2: {\n      x: (corner.x - to.x) * arc + to.x,\n      y: (corner.y - to.y) * arc + to.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a cubic Bèzier curve command to a path.\n * @worklet\n */\nexport const addCurve = (path: Path, c: Curve) => {\n  \"worklet\";\n  path.curves.push({\n    c1: c.c1,\n    c2: c.c2,\n    to: c.to,\n  });\n};\n\n/**\n * @summary Add a line command to a path.\n * @worklet\n */\nexport const addLine = (path: Path, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: from,\n    c2: to,\n    to,\n  });\n};\n\n/**\n * @summary Add a quadratic Bèzier curve command to a path.\n * @worklet\n */\nexport const addQuadraticCurve = (path: Path, cp: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: {\n      x: from.x / 3 + (2 / 3) * cp.x,\n      y: from.y / 3 + (2 / 3) * cp.y,\n    },\n    c2: {\n      x: to.x / 3 + (2 / 3) * cp.x,\n      y: to.y / 3 + (2 / 3) * cp.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a close command to a path.\n * @worklet\n */\nexport const close = (path: Path) => {\n  \"worklet\";\n  path.close = true;\n};\n\ninterface SelectedCurve {\n  from: Vector;\n  curve: Curve;\n}\n\ninterface NullableSelectedCurve {\n  from: Vector;\n  curve: Curve | null;\n}\n\n/**\n * @worklet\n */\nconst curveIsFound = (c: NullableSelectedCurve): c is SelectedCurve => {\n  \"worklet\";\n  return c.curve !== null;\n};\n\n/**\n * @summary Return the curves at x. This function assumes that only one curve is available at x\n * @worklet\n */\nexport const selectCurve = (path: Path, x: number): SelectedCurve => {\n  \"worklet\";\n  const result: NullableSelectedCurve = {\n    from: path.move,\n    curve: null,\n  };\n  for (let i = 0; i < path.curves.length; i++) {\n    const c = path.curves[i];\n    const contains =\n      result.from.x > c.to.x\n        ? x >= c.to.x && x <= result.from.x\n        : x >= result.from.x && x <= c.to.x;\n    if (contains) {\n      result.curve = c;\n      break;\n    }\n    result.from = c.to;\n  }\n  if (!curveIsFound(result)) {\n    throw new Error(`No curve found at ${x}`);\n  }\n  return result;\n};\n\n/**\n * @summary Return the y value of a path given its x coordinate\n * @example\n    const p1 = parse(\n      \"M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150\"\n    );\n    // 75\n    getYForX(p1, 200))\n    // ~151\n    getYForX(p1, 50)\n * @worklet\n */\nexport const getYForX = (path: Path, x: number, precision = 2) => {\n  \"worklet\";\n  const c = selectCurve(path, x);\n  return cubicBezierYForX(\n    x,\n    c.from,\n    c.curve.c1,\n    c.curve.c2,\n    c.curve.to,\n    precision\n  );\n};\n\nconst controlPoint = (\n  current: Vector,\n  previous: Vector,\n  next: Vector,\n  reverse: boolean,\n  smoothing: number\n) => {\n  \"worklet\";\n  const p = previous || current;\n  const n = next || current;\n  // Properties of the opposed-line\n  const lengthX = n.x - p.x;\n  const lengthY = n.y - p.y;\n\n  const o = cartesian2Polar({ x: lengthX, y: lengthY });\n  // If is end-control-point, add PI to the angle to go backward\n  const angle = o.theta + (reverse ? Math.PI : 0);\n  const length = o.radius * smoothing;\n  // The control point position is relative to the current point\n  const x = current.x + Math.cos(angle) * length;\n  const y = current.y + Math.sin(angle) * length;\n  return { x, y };\n};\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\n/**\n * @summary Link points via a smooth cubic Bézier curves\n * from https://github.com/rainbow-me/rainbow\n */\nexport const curveLines = (\n  points: Vector<number>[],\n  smoothing: number,\n  strategy: \"complex\" | \"bezier\" | \"simple\"\n) => {\n  \"worklet\";\n  const path = createPath(points[0]);\n  // build the d attributes by looping over the points\n  for (let i = 0; i < points.length; i++) {\n    if (i === 0) {\n      continue;\n    }\n    const point = points[i];\n    const next = points[i + 1];\n    const prev = points[i - 1];\n    const cps = controlPoint(prev, points[i - 2], point, false, smoothing);\n    const cpe = controlPoint(point, prev, next, true, smoothing);\n    switch (strategy) {\n      case \"simple\":\n        const cp = {\n          x: (cps.x + cpe.x) / 2,\n          y: (cps.y + cpe.y) / 2,\n        };\n        addQuadraticCurve(path, cp, point);\n        break;\n      case \"bezier\":\n        const p0 = points[i - 2] || prev;\n        const p1 = points[i - 1];\n        const cp1x = (2 * p0.x + p1.x) / 3;\n        const cp1y = (2 * p0.y + p1.y) / 3;\n        const cp2x = (p0.x + 2 * p1.x) / 3;\n        const cp2y = (p0.y + 2 * p1.y) / 3;\n        const cp3x = (p0.x + 4 * p1.x + point.x) / 6;\n        const cp3y = (p0.y + 4 * p1.y + point.y) / 6;\n        path.curves.push({\n          c1: { x: cp1x, y: cp1y },\n          c2: { x: cp2x, y: cp2y },\n          to: { x: cp3x, y: cp3y },\n        });\n        if (i === points.length - 1) {\n          path.curves.push({\n            to: points[points.length - 1],\n            c1: points[points.length - 1],\n            c2: points[points.length - 1],\n          });\n        }\n        break;\n      case \"complex\":\n        path.curves.push({\n          to: point,\n          c1: cps,\n          c2: cpe,\n        });\n        break;\n      default:\n        exhaustiveCheck(strategy);\n    }\n  }\n  return path;\n};\n"]},"metadata":{},"sourceType":"module"}