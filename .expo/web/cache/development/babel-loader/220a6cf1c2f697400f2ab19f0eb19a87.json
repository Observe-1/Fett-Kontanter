{"ast":null,"code":"import { interpolateColor } from \"react-native-reanimated\";\nexport var colorForBackground = function () {\n  var _f = function _f(r, g, b) {\n    var L = 0.299 * r + 0.587 * g + 0.114 * b;\n    return L > 186 ? 0x000000ff : 0xffffffff;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function colorForBackground(r,g,b){var L=0.299*r+0.587*g+0.114*b;return L>186?0x000000ff:0xffffffff;}\";\n  _f.__workletHash = 13043722648116;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var mixColor = function () {\n  var _f = function _f(value, color1, color2) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"RGB\";\n    return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n  };\n\n  _f._closure = {\n    interpolateColor: interpolateColor\n  };\n  _f.asString = \"function mixColor(value,color1,color2){const{interpolateColor}=jsThis._closure;{var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\\\"RGB\\\";return interpolateColor(value,[0,1],[color1,color2],colorSpace);}}\";\n  _f.__workletHash = 16596885486903;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Colors.ts"],"names":["colorForBackground","L","mixColor","colorSpace","interpolateColor"],"mappings":"AAAA,SAAA,gBAAA,QAAA,yBAAA;AAQA,OAAO,IAAMA,kBAAAA;AAAAA,uBAAqB,CAArBA,EAAqB,CAArBA,EAAqB,CAArBA,EAA0D;AAErE,QAAMC,CAAC,GAAG,QAAA,CAAA,GAAY,QAAZ,CAAA,GAAwB,QAAlC,CAAA;AACA,WAAOA,CAAC,GAADA,GAAAA,GAAAA,UAAAA,GAAP,UAAA;AAHK,GAAMD;;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA,GAAN;AAcP,OAAO,IAAME,QAAAA;AAAAA,uBAAW,KAAXA,EAAW,MAAXA,EAAW,MAAXA,EAKR;AADHC,QAAAA,UACG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADyB,KAA5BA;AAGA,WAAOC,gBAAgB,CAAA,KAAA,EAErB,CAAA,CAAA,EAFqB,CAErB,CAFqB,EAKrB,CAAA,MAAA,EALqB,MAKrB,CALqB,EAAvB,UAAuB,CAAvB;AAPK,GAAMF;;AAAAA;AAAAA,sB;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA,GAAN","sourcesContent":["import { interpolateColor } from \"react-native-reanimated\";\n\nexport type AnimatedColor = string | number;\n\n/**\n * @summary Returns black or white depending on the value of the background color.\n * @worklet\n */\nexport const colorForBackground = (r: number, g: number, b: number) => {\n  \"worklet\";\n  const L = 0.299 * r + 0.587 * g + 0.114 * b;\n  return L > 186 ? 0x000000ff : 0xffffffff;\n};\n\n/**\n * Interpolate color from 0 to 1\n * @param value\n * @param color1\n * @param color2\n * @param colorSpace\n * @worklet\n */\nexport const mixColor = (\n  value: number,\n  color1: AnimatedColor,\n  color2: AnimatedColor,\n  colorSpace: \"RGB\" | \"HSV\" = \"RGB\"\n) => {\n  \"worklet\";\n  return interpolateColor(\n    value,\n    [0, 1],\n    // TODO: remove any cast once https://github.com/software-mansion/react-native-reanimated/pull/1479 is merged\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [color1 as any, color2 as any],\n    colorSpace\n  );\n};\n"]},"metadata":{},"sourceType":"module"}