{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { makeRemote, makeShareable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../derived\";\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = NUMBER + '%';\n\nvar call = function () {\n  var _f = function _f() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n  };\n\n  _f._closure = {};\n  _f.asString = \"function call(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return'\\\\\\\\(\\\\\\\\s*('+args.join(')\\\\\\\\s*,\\\\\\\\s*(')+')\\\\\\\\s*\\\\\\\\)';}\";\n  _f.__workletHash = 15828801940126;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar jsCachedMatchers = {};\nvar uiCachedMatchers = makeRemote({});\n\nvar getMatchers = function () {\n  var _f = function _f() {\n    var cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n\n    if (cachedMatchers.rgb === undefined) {\n      cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n      cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n      cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n      cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n      cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n      cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n      cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n      cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n    }\n\n    return cachedMatchers;\n  };\n\n  _f._closure = {\n    uiCachedMatchers: uiCachedMatchers,\n    jsCachedMatchers: jsCachedMatchers,\n    call: call,\n    NUMBER: NUMBER,\n    PERCENTAGE: PERCENTAGE\n  };\n  _f.asString = \"function getMatchers(){const{uiCachedMatchers,jsCachedMatchers,call,NUMBER,PERCENTAGE}=jsThis._closure;{var cachedMatchers=_WORKLET?uiCachedMatchers:jsCachedMatchers;if(cachedMatchers.rgb===undefined){cachedMatchers.rgb=new RegExp('rgb'+call(NUMBER,NUMBER,NUMBER));cachedMatchers.rgba=new RegExp('rgba'+call(NUMBER,NUMBER,NUMBER,NUMBER));cachedMatchers.hsl=new RegExp('hsl'+call(NUMBER,PERCENTAGE,PERCENTAGE));cachedMatchers.hsla=new RegExp('hsla'+call(NUMBER,PERCENTAGE,PERCENTAGE,NUMBER));cachedMatchers.hex3=/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;cachedMatchers.hex4=/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;cachedMatchers.hex6=/^#([0-9a-fA-F]{6})$/;cachedMatchers.hex8=/^#([0-9a-fA-F]{8})$/;}return cachedMatchers;}}\";\n  _f.__workletHash = 7716380072712;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar hue2rgb = function () {\n  var _f = function _f(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n\n    if (t > 1) {\n      t -= 1;\n    }\n\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n\n    if (t < 1 / 2) {\n      return q;\n    }\n\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n\n    return p;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function hue2rgb(p,q,t){if(t<0){t+=1;}if(t>1){t-=1;}if(t<1/6){return p+(q-p)*6*t;}if(t<1/2){return q;}if(t<2/3){return p+(q-p)*(2/3-t)*6;}return p;}\";\n  _f.__workletHash = 3618366985414;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar hslToRgb = function () {\n  var _f = function _f(h, s, l) {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    var r = hue2rgb(p, q, h + 1 / 3);\n    var g = hue2rgb(p, q, h);\n    var b = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n  };\n\n  _f._closure = {\n    hue2rgb: hue2rgb\n  };\n  _f.asString = \"function hslToRgb(h,s,l){const{hue2rgb}=jsThis._closure;{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;var r=hue2rgb(p,q,h+1/3);var g=hue2rgb(p,q,h);var b=hue2rgb(p,q,h-1/3);return Math.round(r*255)<<24|Math.round(g*255)<<16|Math.round(b*255)<<8;}}\";\n  _f.__workletHash = 2134669154055;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar parse255 = function () {\n  var _f = function _f(str) {\n    var int = Number.parseInt(str, 10);\n\n    if (int < 0) {\n      return 0;\n    }\n\n    if (int > 255) {\n      return 255;\n    }\n\n    return int;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function parse255(str){var int=Number.parseInt(str,10);if(int<0){return 0;}if(int>255){return 255;}return int;}\";\n  _f.__workletHash = 11793634778162;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar parse360 = function () {\n  var _f = function _f(str) {\n    var int = Number.parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function parse360(str){var int=Number.parseFloat(str);return(int%360+360)%360/360;}\";\n  _f.__workletHash = 16816192231836;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar parse1 = function () {\n  var _f = function _f(str) {\n    var num = Number.parseFloat(str);\n\n    if (num < 0) {\n      return 0;\n    }\n\n    if (num > 1) {\n      return 255;\n    }\n\n    return Math.round(num * 255);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function parse1(str){var num=Number.parseFloat(str);if(num<0){return 0;}if(num>1){return 255;}return Math.round(num*255);}\";\n  _f.__workletHash = 12235184089721;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar parsePercentage = function () {\n  var _f = function _f(str) {\n    var int = Number.parseFloat(str);\n\n    if (int < 0) {\n      return 0;\n    }\n\n    if (int > 100) {\n      return 1;\n    }\n\n    return int / 100;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function parsePercentage(str){var int=Number.parseFloat(str);if(int<0){return 0;}if(int>100){return 1;}return int/100;}\";\n  _f.__workletHash = 11936566645320;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar names = makeShareable({\n  transparent: 0x00000000,\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n});\n\nvar normalizeColor = function () {\n  var _f = function _f(color) {\n    if (typeof color === 'number') {\n      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n        return color;\n      }\n\n      return null;\n    }\n\n    if (typeof color !== 'string') {\n      return null;\n    }\n\n    var matchers = getMatchers();\n    var match;\n\n    if (match = matchers.hex6.exec(color)) {\n      return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n    }\n\n    if (names[color] !== undefined) {\n      return names[color];\n    }\n\n    if (match = matchers.rgb.exec(color)) {\n      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return Number.parseInt(match[1], 16) >>> 0;\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n    }\n\n    return null;\n  };\n\n  _f._closure = {\n    getMatchers: getMatchers,\n    names: names,\n    parse255: parse255,\n    parse1: parse1,\n    hslToRgb: hslToRgb,\n    parse360: parse360,\n    parsePercentage: parsePercentage\n  };\n  _f.asString = \"function normalizeColor(color){const{getMatchers,names,parse255,parse1,hslToRgb,parse360,parsePercentage}=jsThis._closure;{if(typeof color==='number'){if(color>>>0===color&&color>=0&&color<=0xffffffff){return color;}return null;}if(typeof color!=='string'){return null;}var matchers=getMatchers();var match;if(match=matchers.hex6.exec(color)){return Number.parseInt(match[1]+'ff',16)>>>0;}if(names[color]!==undefined){return names[color];}if(match=matchers.rgb.exec(color)){return(parse255(match[1])<<24|parse255(match[2])<<16|parse255(match[3])<<8|0x000000ff)>>>0;}if(match=matchers.rgba.exec(color)){return(parse255(match[1])<<24|parse255(match[2])<<16|parse255(match[3])<<8|parse1(match[4]))>>>0;}if(match=matchers.hex3.exec(color)){return Number.parseInt(match[1]+match[1]+match[2]+match[2]+match[3]+match[3]+'ff',16)>>>0;}if(match=matchers.hex8.exec(color)){return Number.parseInt(match[1],16)>>>0;}if(match=matchers.hex4.exec(color)){return Number.parseInt(match[1]+match[1]+match[2]+match[2]+match[3]+match[3]+match[4]+match[4],16)>>>0;}if(match=matchers.hsl.exec(color)){return(hslToRgb(parse360(match[1]),parsePercentage(match[2]),parsePercentage(match[3]))|0x000000ff)>>>0;}if(match=matchers.hsla.exec(color)){return(hslToRgb(parse360(match[1]),parsePercentage(match[2]),parsePercentage(match[3]))|parse1(match[4]))>>>0;}return null;}}\";\n  _f.__workletHash = 3604990110820;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var opacity = function () {\n  var _f = function _f(c) {\n    return (c >> 24 & 255) / 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(c){return(c>>24&255)/255;}\";\n  _f.__workletHash = 14708696455524;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var red = function () {\n  var _f = function _f(c) {\n    return c >> 16 & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(c){return c>>16&255;}\";\n  _f.__workletHash = 12808130152281;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var green = function () {\n  var _f = function _f(c) {\n    return c >> 8 & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(c){return c>>8&255;}\";\n  _f.__workletHash = 3499836539046;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var blue = function () {\n  var _f = function _f(c) {\n    return c & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(c){return c&255;}\";\n  _f.__workletHash = 14770248723134;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var rgbaColor = function () {\n  var _f = function _f(r, g, b) {\n    var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    if (Platform.OS === 'web' || !_WORKLET) {\n      return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n    }\n\n    var a = alpha * 255;\n    var c = a * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);\n\n    if (Platform.OS === 'android') {\n      return c < 1 << 31 >>> 0 ? c : c - Math.pow(2, 32);\n    }\n\n    return c;\n  };\n\n  _f._closure = {\n    Platform: {\n      OS: Platform.OS\n    }\n  };\n  _f.asString = \"function _f(r,g,b){const{Platform}=jsThis._closure;{var alpha=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;if(Platform.OS==='web'||!_WORKLET){return\\\"rgba(\\\"+r+\\\", \\\"+g+\\\", \\\"+b+\\\", \\\"+alpha+\\\")\\\";}var a=alpha*255;var c=a*(1<<24)+Math.round(r)*(1<<16)+Math.round(g)*(1<<8)+Math.round(b);if(Platform.OS==='android'){return c<1<<31>>>0?c:c-Math.pow(2,32);}return c;}}\";\n  _f.__workletHash = 7079155576100;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar RGBtoHSV = function () {\n  var _f = function _f(r, g, b) {\n    if (arguments.length === 1) {\n      g = r.g, b = r.b, r = r.r;\n    }\n\n    var max = Math.max(r, g, b),\n        min = Math.min(r, g, b),\n        d = max - min,\n        h,\n        s = max === 0 ? 0 : d / max,\n        v = max / 255;\n\n    switch (max) {\n      case min:\n        h = 0;\n        break;\n\n      case r:\n        h = g - b + d * (g < b ? 6 : 0);\n        h /= 6 * d;\n        break;\n\n      case g:\n        h = b - r + d * 2;\n        h /= 6 * d;\n        break;\n\n      case b:\n        h = r - g + d * 4;\n        h /= 6 * d;\n        break;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function RGBtoHSV(r,g,b){if(arguments.length===1){g=r.g,b=r.b,r=r.r;}var max=Math.max(r,g,b),min=Math.min(r,g,b),d=max-min,h,s=max===0?0:d/max,v=max/255;switch(max){case min:h=0;break;case r:h=g-b+d*(g<b?6:0);h/=6*d;break;case g:h=b-r+d*2;h/=6*d;break;case b:h=r-g+d*4;h/=6*d;break;}return{h:h,s:s,v:v};}\";\n  _f.__workletHash = 11077425420218;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar HSVtoRGB = function () {\n  var _f = function _f(h, s, v) {\n    var r, g, b, i, f, p, q, t;\n\n    if (arguments.length === 1) {\n      s = h.s, v = h.v, h = h.h;\n    }\n\n    i = Math.floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        r = v, g = t, b = p;\n        break;\n\n      case 1:\n        r = q, g = v, b = p;\n        break;\n\n      case 2:\n        r = p, g = v, b = t;\n        break;\n\n      case 3:\n        r = p, g = q, b = v;\n        break;\n\n      case 4:\n        r = t, g = p, b = v;\n        break;\n\n      case 5:\n        r = v, g = p, b = q;\n        break;\n    }\n\n    return {\n      r: Math.round(r * 255),\n      g: Math.round(g * 255),\n      b: Math.round(b * 255)\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function HSVtoRGB(h,s,v){var r,g,b,i,f,p,q,t;if(arguments.length===1){s=h.s,v=h.v,h=h.h;}i=Math.floor(h*6);f=h*6-i;p=v*(1-s);q=v*(1-f*s);t=v*(1-(1-f)*s);switch(i%6){case 0:r=v,g=t,b=p;break;case 1:r=q,g=v,b=p;break;case 2:r=p,g=v,b=t;break;case 3:r=p,g=q,b=v;break;case 4:r=t,g=p,b=v;break;case 5:r=v,g=p,b=q;break;}return{r:Math.round(r*255),g:Math.round(g*255),b:Math.round(b*255)};}\";\n  _f.__workletHash = 1007089298644;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var hsvToColor = function () {\n  var _f = function _f(h, s, v) {\n    var _HSVtoRGB = HSVtoRGB(h, s, v),\n        r = _HSVtoRGB.r,\n        g = _HSVtoRGB.g,\n        b = _HSVtoRGB.b;\n\n    return rgbaColor(r, g, b);\n  };\n\n  _f._closure = {\n    HSVtoRGB: HSVtoRGB,\n    rgbaColor: rgbaColor\n  };\n  _f.asString = \"function _f(h,s,v){const{HSVtoRGB,rgbaColor}=jsThis._closure;{var _HSVtoRGB=HSVtoRGB(h,s,v),r=_HSVtoRGB.r,g=_HSVtoRGB.g,b=_HSVtoRGB.b;return rgbaColor(r,g,b);}}\";\n  _f.__workletHash = 8892596351665;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var processColorInitially = function () {\n  var _f = function _f(color) {\n    if (color === null || color === undefined || typeof color === 'number') {\n      return color;\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (normalizedColor === null || normalizedColor === undefined) {\n      return undefined;\n    }\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n    return normalizedColor;\n  };\n\n  _f._closure = {\n    normalizeColor: normalizeColor\n  };\n  _f.asString = \"function processColorInitially(color){const{normalizeColor}=jsThis._closure;{if(color===null||color===undefined||typeof color==='number'){return color;}var normalizedColor=normalizeColor(color);if(normalizedColor===null||normalizedColor===undefined){return undefined;}if(typeof normalizedColor!=='number'){return null;}normalizedColor=(normalizedColor<<24|normalizedColor>>>8)>>>0;return normalizedColor;}}\";\n  _f.__workletHash = 2610780956833;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var isColor = function () {\n  var _f = function _f(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    return processColorInitially(value) != null;\n  };\n\n  _f._closure = {\n    processColorInitially: processColorInitially\n  };\n  _f.asString = \"function isColor(value){const{processColorInitially}=jsThis._closure;{if(typeof value!=='string'){return false;}return processColorInitially(value)!=null;}}\";\n  _f.__workletHash = 1808885354308;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var processColor = function () {\n  var _f = function _f(color) {\n    var normalizedColor = processColorInitially(color);\n\n    if (normalizedColor === null || normalizedColor === undefined) {\n      return undefined;\n    }\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    if (Platform.OS === 'android') {\n      normalizedColor = normalizedColor | 0x0;\n    }\n\n    return normalizedColor;\n  };\n\n  _f._closure = {\n    processColorInitially: processColorInitially,\n    Platform: {\n      OS: Platform.OS\n    }\n  };\n  _f.asString = \"function processColor(color){const{processColorInitially,Platform}=jsThis._closure;{var normalizedColor=processColorInitially(color);if(normalizedColor===null||normalizedColor===undefined){return undefined;}if(typeof normalizedColor!=='number'){return null;}if(Platform.OS==='android'){normalizedColor=normalizedColor|0x0;}return normalizedColor;}}\";\n  _f.__workletHash = 5222930667238;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var convertToHSVA = function () {\n  var _f = function _f(color) {\n    var processedColor = processColorInitially(color);\n    var a = (processedColor >>> 24) / 255;\n    var r = processedColor << 8 >>> 24;\n    var g = processedColor << 16 >>> 24;\n    var b = processedColor << 24 >>> 24;\n\n    var _RGBtoHSV = RGBtoHSV(r, g, b),\n        h = _RGBtoHSV.h,\n        s = _RGBtoHSV.s,\n        v = _RGBtoHSV.v;\n\n    return [h, s, v, a];\n  };\n\n  _f._closure = {\n    processColorInitially: processColorInitially,\n    RGBtoHSV: RGBtoHSV\n  };\n  _f.asString = \"function convertToHSVA(color){const{processColorInitially,RGBtoHSV}=jsThis._closure;{var processedColor=processColorInitially(color);var a=(processedColor>>>24)/255;var r=processedColor<<8>>>24;var g=processedColor<<16>>>24;var b=processedColor<<24>>>24;var _RGBtoHSV=RGBtoHSV(r,g,b),h=_RGBtoHSV.h,s=_RGBtoHSV.s,v=_RGBtoHSV.v;return[h,s,v,a];}}\";\n  _f.__workletHash = 2100046948777;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var toRGBA = function () {\n  var _f = function _f(HSVA) {\n    var _HSVtoRGB2 = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]),\n        r = _HSVtoRGB2.r,\n        g = _HSVtoRGB2.g,\n        b = _HSVtoRGB2.b;\n\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + HSVA[3] + \")\";\n  };\n\n  _f._closure = {\n    HSVtoRGB: HSVtoRGB\n  };\n  _f.asString = \"function toRGBA(HSVA){const{HSVtoRGB}=jsThis._closure;{var _HSVtoRGB2=HSVtoRGB(HSVA[0],HSVA[1],HSVA[2]),r=_HSVtoRGB2.r,g=_HSVtoRGB2.g,b=_HSVtoRGB2.b;return\\\"rgba(\\\"+r+\\\", \\\"+g+\\\", \\\"+b+\\\", \\\"+HSVA[3]+\\\")\\\";}}\";\n  _f.__workletHash = 6083709272735;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var colorsAsHSV = colors.map(function (c) {\n      return RGBtoHSV(c);\n    });\n    var h = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.h;\n    }), Extrapolate.CLAMP);\n    var s = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.s;\n    }), Extrapolate.CLAMP);\n    var v = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.v;\n    }), Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n  };\n\n  _f._closure = {\n    RGBtoHSV: RGBtoHSV,\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    hsvToColor: hsvToColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors){const{RGBtoHSV,interpolate,Extrapolate,hsvToColor}=jsThis._closure;{var colorsAsHSV=colors.map(function(c){return RGBtoHSV(c);});var h=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.h;}),Extrapolate.CLAMP);var s=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.s;}),Extrapolate.CLAMP);var v=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.v;}),Extrapolate.CLAMP);return hsvToColor(h,s,v);}}\";\n  _f.__workletHash = 11351363682825;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var r = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return red(c);\n    }), Extrapolate.CLAMP));\n    var g = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return green(c);\n    }), Extrapolate.CLAMP));\n    var b = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return blue(c);\n    }), Extrapolate.CLAMP));\n    var a = interpolate(value, inputRange, colors.map(function (c) {\n      return opacity(c);\n    }), Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n  };\n\n  _f._closure = {\n    interpolate: interpolate,\n    red: red,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    green: green,\n    blue: blue,\n    opacity: opacity,\n    rgbaColor: rgbaColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors){const{interpolate,red,Extrapolate,green,blue,opacity,rgbaColor}=jsThis._closure;{var r=Math.round(interpolate(value,inputRange,colors.map(function(c){return red(c);}),Extrapolate.CLAMP));var g=Math.round(interpolate(value,inputRange,colors.map(function(c){return green(c);}),Extrapolate.CLAMP));var b=Math.round(interpolate(value,inputRange,colors.map(function(c){return blue(c);}),Extrapolate.CLAMP));var a=interpolate(value,inputRange,colors.map(function(c){return opacity(c);}),Extrapolate.CLAMP);return rgbaColor(r,g,b,a);}}\";\n  _f.__workletHash = 9429974868;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolateColor = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n    outputRange = outputRange.map(function (c) {\n      return processColor(c);\n    });\n\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, outputRange);\n    }\n\n    if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, outputRange);\n    }\n\n    throw new Error(\"invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n\n  _f._closure = {\n    processColor: processColor,\n    interpolateColorsHSV: interpolateColorsHSV,\n    interpolateColorsRGB: interpolateColorsRGB\n  };\n  _f.asString = \"function _f(value,inputRange,outputRange){const{processColor,interpolateColorsHSV,interpolateColorsRGB}=jsThis._closure;{var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';outputRange=outputRange.map(function(c){return processColor(c);});if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,outputRange);}if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,outputRange);}throw new Error(\\\"invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 12379580177891;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["C:/Users/Adil/Documents/Financial/node_modules/react-native-reanimated/src/reanimated2/Colors.js"],"names":["makeRemote","makeShareable","interpolate","Extrapolate","NUMBER","PERCENTAGE","call","args","join","jsCachedMatchers","uiCachedMatchers","getMatchers","cachedMatchers","_WORKLET","rgb","undefined","RegExp","rgba","hsl","hsla","hex3","hex4","hex6","hex8","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Math","round","parse255","str","int","Number","parseInt","parse360","parseFloat","parse1","num","parsePercentage","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","normalizeColor","color","matchers","match","exec","opacity","c","rgbaColor","alpha","Platform","OS","a","pow","RGBtoHSV","arguments","length","max","min","d","v","HSVtoRGB","i","f","floor","hsvToColor","processColorInitially","normalizedColor","isColor","value","processColor","convertToHSVA","processedColor","toRGBA","HSVA","interpolateColorsHSV","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","interpolateColor","outputRange","colorSpace","Error"],"mappings":"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","sourcesContent":["/* global _WORKLET */\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n\n/* eslint no-bitwise: 0 */\n\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable } from './core';\nimport { interpolate } from './interpolation';\nimport { Extrapolate } from '../derived';\n\n// var INTEGER = '[-+]?\\\\d+';\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args) {\n  'worklet';\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\n// matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n  const cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp(\n      'rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)\n    );\n    cachedMatchers.hsl = new RegExp(\n      'hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)\n    );\n    cachedMatchers.hsla = new RegExp(\n      'hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)\n    );\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n  return cachedMatchers;\n}\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n\n  return (\n    (Math.round(r * 255) << 24) |\n    (Math.round(g * 255) << 16) |\n    (Math.round(b * 255) << 8)\n  );\n}\n\nfunction parse255(str) {\n  'worklet';\n  const int = Number.parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n  const int = Number.parseFloat(str);\n  return (((int % 360) + 360) % 360) / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n  const num = Number.parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet';\n  // parseFloat conveniently ignores the final %\n  const int = Number.parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\n\nconst names = makeShareable({\n  transparent: 0x00000000,\n\n  // http://www.w3.org/TR/css3-color/#svg-color\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff,\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n\n  let match;\n\n  // Ordered based on occurrences on Facebook codebase\n  if ((match = matchers.hex6.exec(color))) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if ((match = matchers.rgb.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n      (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.rgba.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n      (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hex3.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n        match[1] + // r\n        match[2] +\n        match[2] + // g\n        match[3] +\n        match[3] + // b\n          'ff', // a\n        16\n      ) >>> 0\n    );\n  }\n\n  // https://drafts.csswg.org/css-color-4/#hex-notation\n  if ((match = matchers.hex8.exec(color))) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if ((match = matchers.hex4.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n        match[1] + // r\n        match[2] +\n        match[2] + // g\n        match[3] +\n        match[3] + // b\n          match[4] +\n          match[4], // a\n        16\n      ) >>> 0\n    );\n  }\n\n  if ((match = matchers.hsl.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hsla.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  return null;\n}\n\nexport const opacity = (c) => {\n  'worklet';\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c) => {\n  'worklet';\n  return (c >> 16) & 255;\n};\n\nexport const green = (c) => {\n  'worklet';\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c) => {\n  'worklet';\n  return c & 255;\n};\n\nexport const rgbaColor = (r, g, b, alpha = 1) => {\n  'worklet';\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n  const a = alpha * 255;\n  const c =\n    a * (1 << 24) +\n    Math.round(r) * (1 << 16) +\n    Math.round(g) * (1 << 8) +\n    Math.round(b);\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return c < (1 << 31) >>> 0 ? c : c - Math.pow(2, 32);\n  }\n  return c;\n};\n\n/* accepts parameters\n * r  Object = {r:x, g:y, b:z}\n * OR\n * r, g, b\n * 0 <= r, g, b <= 255\n * returns 0 <= h, s, v <= 1\n */\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n  /* eslint-disable */\n  if (arguments.length === 1) {\n    (g = r.g), (b = r.b), (r = r.r);\n  }\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b),\n    d = max - min,\n    h,\n    s = max === 0 ? 0 : d / max,\n    v = max / 255;\n\n  switch (max) {\n    case min:\n      h = 0;\n      break;\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v,\n  };\n  /* eslint-enable */\n}\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * 0 <= h, s, v <= 1\n * returns 0 <= r, g, b <= 255\n */\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n  /* eslint-disable */\n  var r, g, b, i, f, p, q, t;\n  if (arguments.length === 1) {\n    (s = h.s), (v = h.v), (h = h.h);\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n  /* eslint-enable */\n}\n\nexport const hsvToColor = (h, s, v) => {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(h, s, v);\n  return rgbaColor(r, g, b);\n};\n\nexport function processColorInitially(color) {\n  'worklet';\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\n  return normalizedColor;\n}\n\nexport function isColor(value) {\n  'worklet';\n  if (typeof value !== 'string') {\n    return false;\n  }\n  return processColorInitially(value) != null;\n}\n\nexport function processColor(color) {\n  'worklet';\n  let normalizedColor = processColorInitially(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\n\nexport function convertToHSVA(color) {\n  'worklet';\n  const processedColor = processColorInitially(color); // argb;\n  const a = (processedColor >>> 24) / 255;\n  const r = (processedColor << 8) >>> 24;\n  const g = (processedColor << 16) >>> 24;\n  const b = (processedColor << 24) >>> 24;\n  const { h, s, v } = RGBtoHSV(r, g, b);\n  return [h, s, v, a];\n}\n\nexport function toRGBA(HSVA) {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n  return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\n\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n  'worklet';\n  const colorsAsHSV = colors.map((c) => RGBtoHSV(c));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n  'worklet';\n  const r = Math.round(\n    interpolate(value, inputRange, colors.map((c) => red(c)), Extrapolate.CLAMP)\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return rgbaColor(r, g, b, a);\n};\n\nexport const interpolateColor = (\n  value,\n  inputRange,\n  outputRange,\n  colorSpace = 'RGB'\n) => {\n  'worklet';\n  outputRange = outputRange.map((c) => processColor(c));\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, outputRange);\n  }\n  throw new Error(\n    `invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"]},"metadata":{},"sourceType":"module"}