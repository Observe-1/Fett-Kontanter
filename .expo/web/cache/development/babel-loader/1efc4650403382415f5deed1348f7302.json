{"ast":null,"code":"export var move = function () {\n  var _f = function _f(input, from, to) {\n    var offsets = input.slice();\n\n    while (from < 0) {\n      from += offsets.length;\n    }\n\n    while (to < 0) {\n      to += offsets.length;\n    }\n\n    if (to >= offsets.length) {\n      var k = to - offsets.length;\n\n      while (k-- + 1) {\n        offsets.push();\n      }\n    }\n\n    offsets.splice(to, 0, offsets.splice(from, 1)[0]);\n    return offsets;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function move(input,from,to){var offsets=input.slice();while(from<0){from+=offsets.length;}while(to<0){to+=offsets.length;}if(to>=offsets.length){var k=to-offsets.length;while(k--+1){offsets.push();}}offsets.splice(to,0,offsets.splice(from,1)[0]);return offsets;}\";\n  _f.__workletHash = 9681303897229;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Array.ts"],"names":["move","offsets","input","from","to","k"],"mappings":"AAGA,OAAO,IAAMA,IAAAA;AAAAA,uBAAO,KAAPA,EAAO,IAAPA,EAAO,EAAPA,EAAoD;AAE/D,QAAMC,OAAO,GAAGC,KAAK,CAArB,KAAgBA,EAAhB;;AACA,WAAOC,IAAI,GAAX,CAAA,EAAiB;AACfA,MAAAA,IAAI,IAAIF,OAAO,CAAfE,MAAAA;AAEF;;AAAA,WAAOC,EAAE,GAAT,CAAA,EAAe;AACbA,MAAAA,EAAE,IAAIH,OAAO,CAAbG,MAAAA;AAEF;;AAAA,QAAIA,EAAE,IAAIH,OAAO,CAAjB,MAAA,EAA0B;AACxB,UAAII,CAAC,GAAGD,EAAE,GAAGH,OAAO,CAApB,MAAA;;AACA,aAAOI,CAAC,KAAR,CAAA,EAAgB;AACdJ,QAAAA,OAAO,CAAPA,IAAAA;AAEH;AACDA;;AAAAA,IAAAA,OAAO,CAAPA,MAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAsBA,OAAO,CAAPA,MAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAtBA,CAAsBA,CAAtBA;AACA,WAAA,OAAA;AAhBK,GAAMD;;AAAAA;AAAAA;AAAAA;;AAAAA;;AAAAA;AAAAA,GAAN","sourcesContent":["/**\n * @worklet\n */\nexport const move = <T>(input: T[], from: number, to: number) => {\n  \"worklet\";\n  const offsets = input.slice();\n  while (from < 0) {\n    from += offsets.length;\n  }\n  while (to < 0) {\n    to += offsets.length;\n  }\n  if (to >= offsets.length) {\n    let k = to - offsets.length;\n    while (k-- + 1) {\n      offsets.push();\n    }\n  }\n  offsets.splice(to, 0, offsets.splice(from, 1)[0]);\n  return offsets;\n};\n"]},"metadata":{},"sourceType":"module"}