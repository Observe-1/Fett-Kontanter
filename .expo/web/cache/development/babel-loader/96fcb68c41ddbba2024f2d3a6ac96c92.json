{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Adil\\\\Documents\\\\Financial\\\\node_modules\\\\react-native-reanimated\\\\src\\\\createAnimatedComponent.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ReanimatedEventEmitter from \"./ReanimatedEventEmitter\";\nimport AnimatedEvent from \"./core/AnimatedEvent\";\nimport AnimatedNode from \"./core/AnimatedNode\";\nimport AnimatedValue from \"./core/AnimatedValue\";\nimport { createOrReusePropsNode } from \"./core/AnimatedProps\";\nimport WorkletEventHandler from \"./reanimated2/WorkletEventHandler\";\nimport setAndForwardRef from \"./setAndForwardRef\";\nimport invariant from 'fbjs/lib/invariant';\nimport { adaptViewConfig } from \"./ConfigHelper\";\nimport { RNRenderer } from \"./reanimated2/platform-specific/RNRenderer\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof AnimatedNode) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.some(function (item) {\n      return hasAnimatedNodes(item);\n    });\n  }\n\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some(function (key) {\n      return hasAnimatedNodes(value[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n\n  var resultArr = [];\n\n  var _flattenArray = function _flattenArray(arr) {\n    arr.forEach(function (item) {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n\n  _flattenArray(array);\n\n  return resultArr;\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n\n    var _super = _createSuper(AnimatedComponent);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      _classCallCheck(this, AnimatedComponent);\n\n      _this = _super.call(this, props);\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      };\n\n      _this._setComponentRef = setAndForwardRef({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n\n          if (ref != null && ref.getNode == null) {\n            ref.getNode = function () {\n              var _ref$constructor$name;\n\n              console.warn('%s: Calling %s on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>', 'getNode()');\n              return ref;\n            };\n          }\n        }\n      });\n\n      _this._attachProps(_this.props);\n\n      return _this;\n    }\n\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n\n        this._attachPropUpdater();\n\n        this._attachAnimatedStyles();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        var viewTag = findNodeHandle(node);\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.attachEvent(node, key);\n          } else if (prop instanceof WorkletEventHandler) {\n            prop.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.detachEvent(node, key);\n          } else if (prop instanceof WorkletEventHandler) {\n            prop.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n\n        var attached = new Set();\n        var nextEvts = new Set();\n        var viewTag;\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            nextEvts.add(prop.__nodeID);\n          } else if (prop instanceof WorkletEventHandler && viewTag === undefined) {\n            viewTag = prop.viewTag;\n          }\n        }\n\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n\n          if (_prop instanceof AnimatedEvent) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          } else if (_prop instanceof WorkletEventHandler && _prop.reattachNeeded) {\n            _prop.unregisterFromEvents();\n          }\n        }\n\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n\n          if (_prop2 instanceof AnimatedEvent && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          } else if (_prop2 instanceof WorkletEventHandler && _prop2.reattachNeeded) {\n            _prop2.registerForEvents(viewTag, _key2);\n\n            _prop2.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        this._component.setNativeProps(props);\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.set(viewTag, this);\n\n        if (NODE_MAPPING.size === 1) {\n          ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this$props$animatedP;\n\n        var styles = Array.isArray(this.props.style) ? this.props.style : [this.props.style];\n        styles = flattenArray(styles);\n        var viewTag, viewName;\n\n        if (Platform.OS === 'web') {\n          viewTag = findNodeHandle(this);\n          viewName = null;\n        } else {\n          var _hostInstance$viewCon;\n\n          var hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n          viewTag = hostInstance._nativeTag;\n          viewName = (_hostInstance$viewCon = hostInstance.viewConfig) == null ? void 0 : _hostInstance$viewCon.uiViewClassName;\n\n          if (this._hasReanimated2Props(styles)) {\n            adaptViewConfig(hostInstance.viewConfig);\n          }\n        }\n\n        styles.forEach(function (style) {\n          if (style != null && style.viewDescriptor) {\n            style.viewDescriptor.value = {\n              tag: viewTag,\n              name: viewName\n            };\n          }\n        });\n\n        if ((_this$props$animatedP = this.props.animatedProps) != null && _this$props$animatedP.viewDescriptor) {\n          this.props.animatedProps.viewDescriptor.value = {\n            tag: viewTag,\n            name: viewName\n          };\n        }\n      }\n    }, {\n      key: \"_hasReanimated2Props\",\n      value: function _hasReanimated2Props(flattenStyles) {\n        var _this$props$animatedP2;\n\n        if ((_this$props$animatedP2 = this.props.animatedProps) != null && _this$props$animatedP2.viewDescriptor) {\n          return true;\n        }\n\n        if (this.props.style) {\n          for (var _iterator = _createForOfIteratorHelperLoose(flattenStyles), _step; !(_step = _iterator()).done;) {\n            var style = _step.value;\n\n            if (style != null && style.hasOwnProperty('viewDescriptor')) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.delete(viewTag);\n\n        if (NODE_MAPPING.size === 0) {\n          ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n\n        this._reattachNativeEvents(prevProps);\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n\n          if (!hasAnimatedNodes(value)) {\n            style[key] = value;\n          } else if (value instanceof AnimatedValue) {\n            style[key] = value._startingValue;\n          }\n        }\n\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this2 = this;\n\n        var props = {};\n\n        var _loop = function _loop(key) {\n          var value = inputProps[key];\n\n          if (key === 'style') {\n            var styles = Array.isArray(value) ? value : [value];\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptor) {\n                if (style.viewRef.current === null) {\n                  style.viewRef.current = _this2;\n                }\n\n                return style.initial;\n              } else {\n                return style;\n              }\n            });\n            props[key] = _this2._filterNonAnimatedStyle(StyleSheet.flatten(processedStyle));\n          } else if (key === 'animatedProps') {\n            Object.keys(value.initial).forEach(function (key) {\n              props[key] = value.initial[key];\n            });\n          } else if (value instanceof AnimatedEvent) {\n            props[key] = dummyListener;\n          } else if (value instanceof WorkletEventHandler) {\n            if (value.eventNames.length > 0) {\n              value.eventNames.forEach(function (eventName) {\n                props[eventName] = value.listeners ? value.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (!(value instanceof AnimatedNode)) {\n            props[key] = value;\n          } else if (value instanceof AnimatedValue) {\n            props[key] = value._startingValue;\n          }\n        };\n\n        for (var key in inputProps) {\n          _loop(key);\n        }\n\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return AnimatedComponent;\n  }(React.Component);\n\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref == null ? null : {\n      forwardedRef: ref\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 7\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["C:/Users/Adil/Documents/Financial/node_modules/react-native-reanimated/src/createAnimatedComponent.js"],"names":["React","ReanimatedEventEmitter","AnimatedEvent","AnimatedNode","AnimatedValue","createOrReusePropsNode","WorkletEventHandler","setAndForwardRef","invariant","adaptViewConfig","RNRenderer","NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","dummyListener","hasAnimatedNodes","value","Array","isArray","some","item","Object","keys","key","flattenArray","array","resultArr","_flattenArray","arr","forEach","push","createAnimatedComponent","Component","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_animatedPropsCallback","_component","setNativeProps","forceUpdate","_propsAnimated","__getValue","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","ref","getNode","console","warn","constructor","name","_attachProps","_detachPropUpdater","__detach","_detachNativeEvents","setNativeView","_attachNativeEvents","_attachPropUpdater","_attachAnimatedStyles","getScrollableNode","node","_getEventViewRef","findNodeHandle","prop","attachEvent","registerForEvents","detachEvent","unregisterFromEvents","prevProps","attached","Set","nextEvts","add","__nodeID","undefined","has","reattachNeeded","nextProps","oldPropsAnimated","set","size","addListener","styles","style","viewName","Platform","OS","hostInstance","findHostInstance_DEPRECATED","_nativeTag","viewConfig","uiViewClassName","_hasReanimated2Props","viewDescriptor","tag","animatedProps","flattenStyles","hasOwnProperty","delete","removeAllListeners","_reattachNativeEvents","inputStyle","_startingValue","inputProps","processedStyle","map","viewRef","current","initial","_filterNonAnimatedStyle","StyleSheet","flatten","eventNames","length","eventName","listeners","_filterNonAnimatedProps","platformProps","select","web","default","collapsable","displayName","forwardRef","AnimatedComponentWrapper"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedNode from './core/AnimatedNode';\nimport AnimatedValue from './core/AnimatedValue';\nimport { createOrReusePropsNode } from './core/AnimatedProps';\nimport WorkletEventHandler from './reanimated2/WorkletEventHandler';\nimport setAndForwardRef from './setAndForwardRef';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adaptViewConfig } from './ConfigHelper';\nimport { RNRenderer } from './reanimated2/platform-specific/RNRenderer';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof AnimatedNode) {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.some((item) => hasAnimatedNodes(item));\n  }\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));\n  }\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n  const resultArr = [];\n\n  const _flattenArray = (arr) => {\n    arr.forEach((item) => {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n  _flattenArray(array);\n  return resultArr;\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n      this._attachAnimatedStyles();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n      const viewTag = findNodeHandle(node);\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        } else if (prop instanceof WorkletEventHandler) {\n          prop.registerForEvents(viewTag, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        } else if (prop instanceof WorkletEventHandler) {\n          prop.unregisterFromEvents();\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      let viewTag;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        } else if (\n          prop instanceof WorkletEventHandler &&\n          viewTag === undefined\n        ) {\n          viewTag = prop.viewTag;\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        } else if (prop instanceof WorkletEventHandler && prop.reattachNeeded) {\n          prop.unregisterFromEvents();\n        }\n      }\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        } else if (prop instanceof WorkletEventHandler && prop.reattachNeeded) {\n          prop.registerForEvents(viewTag, key);\n          prop.reattachNeeded = false;\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      this._component.setNativeProps(props);\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _attachAnimatedStyles() {\n      let styles = Array.isArray(this.props.style)\n        ? this.props.style\n        : [this.props.style];\n      styles = flattenArray(styles);\n      let viewTag, viewName;\n      if (Platform.OS === 'web') {\n        viewTag = findNodeHandle(this);\n        viewName = null;\n      } else {\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance.viewConfig?.uiViewClassName;\n        // update UI props whitelist for this view\n        if (this._hasReanimated2Props(styles)) {\n          adaptViewConfig(hostInstance.viewConfig);\n        }\n      }\n\n      styles.forEach((style) => {\n        if (style?.viewDescriptor) {\n          style.viewDescriptor.value = { tag: viewTag, name: viewName };\n        }\n      });\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptor) {\n        this.props.animatedProps.viewDescriptor.value = {\n          tag: viewTag,\n          name: viewName,\n        };\n      }\n    }\n\n    _hasReanimated2Props(flattenStyles) {\n      if (this.props.animatedProps?.viewDescriptor) {\n        return true;\n      }\n      if (this.props.style) {\n        for (const style of flattenStyles) {\n          if (style?.hasOwnProperty('viewDescriptor')) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: (ref) => {\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n\n        // TODO: Delete this after React Native also deletes this deprecation helper.\n        if (ref != null && ref.getNode == null) {\n          ref.getNode = () => {\n            console.warn(\n              '%s: Calling %s on the ref of an Animated component ' +\n                'is no longer necessary. You can now directly use the ref ' +\n                'instead. This method will be removed in a future release.',\n              ref.constructor.name ?? '<<anonymous>>',\n              'getNode()'\n            );\n            return ref;\n          };\n        }\n      },\n    });\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (!hasAnimatedNodes(value)) {\n          style[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any style in animated component is set directly to the `Value` we set those styles to the first value of `Value` node in order\n          // to avoid flash of default styles when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          style[key] = value._startingValue;\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          const styles = Array.isArray(value) ? value : [value];\n          const processedStyle = styles.map((style) => {\n            if (style && style.viewDescriptor) {\n              // this is how we recognize styles returned by useAnimatedStyle\n              if (style.viewRef.current === null) {\n                style.viewRef.current = this;\n              }\n              return style.initial;\n            } else {\n              return style;\n            }\n          });\n          props[key] = this._filterNonAnimatedStyle(\n            StyleSheet.flatten(processedStyle)\n          );\n        } else if (key === 'animatedProps') {\n          Object.keys(value.initial).forEach((key) => {\n            props[key] = value.initial[key];\n          });\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (value instanceof WorkletEventHandler) {\n          if (value.eventNames.length > 0) {\n            value.eventNames.forEach((eventName) => {\n              props[eventName] = value.listeners\n                ? value.listeners[eventName]\n                : dummyListener;\n            });\n          } else {\n            props[key] = dummyListener;\n          }\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any prop in animated component is set directly to the `Value` we set those props to the first value of `Value` node in order\n          // to avoid default values for a short moment when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          props[key] = value._startingValue;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName ||\n    Component.name ||\n    'Component'})`;\n\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref == null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}