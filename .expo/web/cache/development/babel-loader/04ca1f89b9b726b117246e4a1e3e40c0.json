{"ast":null,"code":"export var bin = function () {\n  var _f = function _f(value) {\n    return value ? 1 : 0;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function bin(value){return value?1:0;}\";\n  _f.__workletHash = 13761569487986;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var mix = function () {\n  var _f = function _f(value, x, y) {\n    return x * (1 - value) + y * value;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function mix(value,x,y){return x*(1-value)+y*value;}\";\n  _f.__workletHash = 10277563856114;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var toDeg = function () {\n  var _f = function _f(rad) {\n    return rad * 180 / Math.PI;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function toDeg(rad){return rad*180/Math.PI;}\";\n  _f.__workletHash = 650896599637;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var toRad = function () {\n  var _f = function _f(deg) {\n    return deg * Math.PI / 180;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function toRad(deg){return deg*Math.PI/180;}\";\n  _f.__workletHash = 17566627803108;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var avg = function () {\n  var _f = function _f(values) {\n    return values.reduce(function (a, v) {\n      return a + v;\n    }, 0) / values.length;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function avg(values){return values.reduce(function(a,v){return a+v;},0)/values.length;}\";\n  _f.__workletHash = 4256618332742;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var between = function () {\n  var _f = function _f(value, lowerBound, upperBound) {\n    var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (inclusive) {\n      return value >= lowerBound && value <= upperBound;\n    }\n\n    return value > lowerBound && value < upperBound;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function between(value,lowerBound,upperBound){var inclusive=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(inclusive){return value>=lowerBound&&value<=upperBound;}return value>lowerBound&&value<upperBound;}\";\n  _f.__workletHash = 9386968161630;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var clamp = function () {\n  var _f = function _f(value, lowerBound, upperBound) {\n    return Math.min(Math.max(lowerBound, value), upperBound);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function clamp(value,lowerBound,upperBound){return Math.min(Math.max(lowerBound,value),upperBound);}\";\n  _f.__workletHash = 14006305775870;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var cubicBezier = function () {\n  var _f = function _f(t, from, c1, c2, to) {\n    var term = 1 - t;\n    var a = 1 * Math.pow(term, 3) * Math.pow(t, 0) * from;\n    var b = 3 * Math.pow(term, 2) * Math.pow(t, 1) * c1;\n    var c = 3 * Math.pow(term, 1) * Math.pow(t, 2) * c2;\n    var d = 1 * Math.pow(term, 0) * Math.pow(t, 3) * to;\n    return a + b + c + d;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function cubicBezier(t,from,c1,c2,to){var term=1-t;var a=1*Math.pow(term,3)*Math.pow(t,0)*from;var b=3*Math.pow(term,2)*Math.pow(t,1)*c1;var c=3*Math.pow(term,1)*Math.pow(t,2)*c2;var d=1*Math.pow(term,0)*Math.pow(t,3)*to;return a+b+c+d;}\";\n  _f.__workletHash = 14454240715828;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var round = function () {\n  var _f = function _f(value) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var p = Math.pow(10, precision);\n    return Math.round(value * p) / p;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function round(value){var precision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var p=Math.pow(10,precision);return Math.round(value*p)/p;}\";\n  _f.__workletHash = 9407364359024;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar cuberoot = function () {\n  var _f = function _f(x) {\n    var y = Math.pow(Math.abs(x), 1 / 3);\n    return x < 0 ? -y : y;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function cuberoot(x){var y=Math.pow(Math.abs(x),1/3);return x<0?-y:y;}\";\n  _f.__workletHash = 9352097426299;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar solveCubic = function () {\n  var _f = function _f(a, b, c, d) {\n    if (Math.abs(a) < 1e-8) {\n      a = b;\n      b = c;\n      c = d;\n\n      if (Math.abs(a) < 1e-8) {\n        a = b;\n        b = c;\n\n        if (Math.abs(a) < 1e-8) {\n          return [];\n        }\n\n        return [-b / a];\n      }\n\n      var D = b * b - 4 * a * c;\n\n      if (Math.abs(D) < 1e-8) {\n        return [-b / (2 * a)];\n      } else if (D > 0) {\n        return [(-b + Math.sqrt(D)) / (2 * a), (-b - Math.sqrt(D)) / (2 * a)];\n      }\n\n      return [];\n    }\n\n    var p = (3 * a * c - b * b) / (3 * a * a);\n    var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\n    var roots;\n\n    if (Math.abs(p) < 1e-8) {\n      roots = [cuberoot(-q)];\n    } else if (Math.abs(q) < 1e-8) {\n      roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\n    } else {\n      var _D = q * q / 4 + p * p * p / 27;\n\n      if (Math.abs(_D) < 1e-8) {\n        roots = [-1.5 * q / p, 3 * q / p];\n      } else if (_D > 0) {\n        var u = cuberoot(-q / 2 - Math.sqrt(_D));\n        roots = [u - p / (3 * u)];\n      } else {\n        var _u = 2 * Math.sqrt(-p / 3);\n\n        var t = Math.acos(3 * q / p / _u) / 3;\n        var k = 2 * Math.PI / 3;\n        roots = [_u * Math.cos(t), _u * Math.cos(t - k), _u * Math.cos(t - 2 * k)];\n      }\n    }\n\n    for (var i = 0; i < roots.length; i++) {\n      roots[i] -= b / (3 * a);\n    }\n\n    return roots;\n  };\n\n  _f._closure = {\n    cuberoot: cuberoot\n  };\n  _f.asString = \"function solveCubic(a,b,c,d){const{cuberoot}=jsThis._closure;{if(Math.abs(a)<1e-8){a=b;b=c;c=d;if(Math.abs(a)<1e-8){a=b;b=c;if(Math.abs(a)<1e-8){return[];}return[-b/a];}var D=b*b-4*a*c;if(Math.abs(D)<1e-8){return[-b/(2*a)];}else if(D>0){return[(-b+Math.sqrt(D))/(2*a),(-b-Math.sqrt(D))/(2*a)];}return[];}var p=(3*a*c-b*b)/(3*a*a);var q=(2*b*b*b-9*a*b*c+27*a*a*d)/(27*a*a*a);var roots;if(Math.abs(p)<1e-8){roots=[cuberoot(-q)];}else if(Math.abs(q)<1e-8){roots=[0].concat(p<0?[Math.sqrt(-p),-Math.sqrt(-p)]:[]);}else{var _D=q*q/4+p*p*p/27;if(Math.abs(_D)<1e-8){roots=[-1.5*q/p,3*q/p];}else if(_D>0){var u=cuberoot(-q/2-Math.sqrt(_D));roots=[u-p/(3*u)];}else{var _u=2*Math.sqrt(-p/3);var t=Math.acos(3*q/p/_u)/3;var k=2*Math.PI/3;roots=[_u*Math.cos(t),_u*Math.cos(t-k),_u*Math.cos(t-2*k)];}}for(var i=0;i<roots.length;i++){roots[i]-=b/(3*a);}return roots;}}\";\n  _f.__workletHash = 11247795303702;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var cubicBezierYForX = function () {\n  var _f = function _f(x, a, b, c, d) {\n    var precision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n    var pa = -a.x + 3 * b.x - 3 * c.x + d.x;\n    var pb = 3 * a.x - 6 * b.x + 3 * c.x;\n    var pc = -3 * a.x + 3 * b.x;\n    var pd = a.x - x;\n    var t = solveCubic(pa, pb, pc, pd).map(function (root) {\n      return round(root, precision);\n    }).filter(function (root) {\n      return root >= 0 && root <= 1;\n    })[0];\n    return cubicBezier(t, a.y, b.y, c.y, d.y);\n  };\n\n  _f._closure = {\n    solveCubic: solveCubic,\n    round: round,\n    cubicBezier: cubicBezier\n  };\n  _f.asString = \"function cubicBezierYForX(x,a,b,c,d){const{solveCubic,round,cubicBezier}=jsThis._closure;{var precision=arguments.length>5&&arguments[5]!==undefined?arguments[5]:2;var pa=-a.x+3*b.x-3*c.x+d.x;var pb=3*a.x-6*b.x+3*c.x;var pc=-3*a.x+3*b.x;var pd=a.x-x;var t=solveCubic(pa,pb,pc,pd).map(function(root){return round(root,precision);}).filter(function(root){return root>=0&&root<=1;})[0];return cubicBezier(t,a.y,b.y,c.y,d.y);}}\";\n  _f.__workletHash = 7879714586116;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Math.ts"],"names":["bin","value","mix","x","y","toDeg","rad","Math","toRad","deg","avg","values","a","between","inclusive","clamp","cubicBezier","term","b","c","d","round","precision","p","cuberoot","solveCubic","D","q","roots","u","t","k","i","cubicBezierYForX","pa","pb","pc","pd","root"],"mappings":"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","sourcesContent":["import { Vector } from \"./Vectors\";\n\n/**\n * @summary Convert a boolean value into a number.\n * This can be useful in reanimated since 0 and 1 are used for conditional statements.\n * @worklet\n */\nexport const bin = (value: boolean): 0 | 1 => {\n  \"worklet\";\n  return value ? 1 : 0;\n};\n\n/**\n * Linear interpolation\n * @param value\n * @param x\n * @param y\n * @worklet\n */\nexport const mix = (value: number, x: number, y: number) => {\n  \"worklet\";\n  return x * (1 - value) + y * value;\n};\n\n/**\n * @summary Transforms an angle from radians to degrees.\n * @worklet\n */\nexport const toDeg = (rad: number) => {\n  \"worklet\";\n  return (rad * 180) / Math.PI;\n};\n\n/**\n * @summary Transforms an angle from degrees to radians.\n * @worklet\n */\nexport const toRad = (deg: number) => {\n  \"worklet\";\n  return (deg * Math.PI) / 180;\n};\n\n/**\n *\n * @summary Returns the average value\n * @worklet\n */\nexport const avg = (values: number[]) => {\n  \"worklet\";\n  return values.reduce((a, v) => a + v, 0) / values.length;\n};\n\n/**\n * @summary Returns true if node is within lowerBound and upperBound.\n * @worklet\n */\nexport const between = (\n  value: number,\n  lowerBound: number,\n  upperBound: number,\n  inclusive = true\n) => {\n  \"worklet\";\n  if (inclusive) {\n    return value >= lowerBound && value <= upperBound;\n  }\n  return value > lowerBound && value < upperBound;\n};\n\n/**\n *  @summary Clamps a node with a lower and upper bound.\n *  @example\n    clamp(-1, 0, 100); // 0\n    clamp(1, 0, 100); // 1\n    clamp(101, 0, 100); // 100\n  * @worklet\n  */\nexport const clamp = (\n  value: number,\n  lowerBound: number,\n  upperBound: number\n) => {\n  \"worklet\";\n  return Math.min(Math.max(lowerBound, value), upperBound);\n};\n\n/**\n * @description Returns the coordinate of a cubic bezier curve. t is the length of the curve from 0 to 1.\n * cubicBezier(0, p0, p1, p2, p3) equals p0 and cubicBezier(1, p0, p1, p2, p3) equals p3.\n * p0 and p3 are respectively the starting and ending point of the curve. p1 and p2 are the control points.\n * @worklet\n */\nexport const cubicBezier = (\n  t: number,\n  from: number,\n  c1: number,\n  c2: number,\n  to: number\n) => {\n  \"worklet\";\n  const term = 1 - t;\n  const a = 1 * term ** 3 * t ** 0 * from;\n  const b = 3 * term ** 2 * t ** 1 * c1;\n  const c = 3 * term ** 1 * t ** 2 * c2;\n  const d = 1 * term ** 0 * t ** 3 * to;\n  return a + b + c + d;\n};\n\n/**\n * @summary Computes animation node rounded to precision.\n * @worklet\n */\nexport const round = (value: number, precision = 0) => {\n  \"worklet\";\n  const p = Math.pow(10, precision);\n  return Math.round(value * p) / p;\n};\n\n// https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically\nconst cuberoot = (x: number) => {\n  \"worklet\";\n  const y = Math.pow(Math.abs(x), 1 / 3);\n  return x < 0 ? -y : y;\n};\n\nconst solveCubic = (a: number, b: number, c: number, d: number) => {\n  \"worklet\";\n  if (Math.abs(a) < 1e-8) {\n    // Quadratic case, ax^2+bx+c=0\n    a = b;\n    b = c;\n    c = d;\n    if (Math.abs(a) < 1e-8) {\n      // Linear case, ax+b=0\n      a = b;\n      b = c;\n      if (Math.abs(a) < 1e-8) {\n        // Degenerate case\n        return [];\n      }\n      return [-b / a];\n    }\n\n    const D = b * b - 4 * a * c;\n    if (Math.abs(D) < 1e-8) {\n      return [-b / (2 * a)];\n    } else if (D > 0) {\n      return [(-b + Math.sqrt(D)) / (2 * a), (-b - Math.sqrt(D)) / (2 * a)];\n    }\n    return [];\n  }\n\n  // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)\n  const p = (3 * a * c - b * b) / (3 * a * a);\n  const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\n  let roots;\n\n  if (Math.abs(p) < 1e-8) {\n    // p = 0 -> t^3 = -q -> t = -q^1/3\n    roots = [cuberoot(-q)];\n  } else if (Math.abs(q) < 1e-8) {\n    // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0\n    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\n  } else {\n    const D = (q * q) / 4 + (p * p * p) / 27;\n    if (Math.abs(D) < 1e-8) {\n      // D = 0 -> two roots\n      roots = [(-1.5 * q) / p, (3 * q) / p];\n    } else if (D > 0) {\n      // Only one real root\n      const u = cuberoot(-q / 2 - Math.sqrt(D));\n      roots = [u - p / (3 * u)];\n    } else {\n      // D < 0, three roots, but needs to use complex numbers/trigonometric solution\n      const u = 2 * Math.sqrt(-p / 3);\n      const t = Math.acos((3 * q) / p / u) / 3; // D < 0 implies p < 0 and acos argument in [-1..1]\n      const k = (2 * Math.PI) / 3;\n      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];\n    }\n  }\n\n  // Convert back from depressed cubic\n  for (let i = 0; i < roots.length; i++) {\n    roots[i] -= b / (3 * a);\n  }\n\n  return roots;\n};\n\n/**\n *  @summary Given a cubic Bèzier curve, return the y value for x.\n *  @example\n    const x = 116;\n    const from = vec.create(59, 218);\n    const c1 = vec.create(131, 39);\n    const c2 = vec.create(204, 223);\n    const to = vec.create(227, 89);\n    // y= 139\n    const y = cubicBezierYForX(x, from, c1, c2, to)));\n  * @worklet\n  */\nexport const cubicBezierYForX = (\n  x: number,\n  a: Vector,\n  b: Vector,\n  c: Vector,\n  d: Vector,\n  precision = 2\n) => {\n  \"worklet\";\n  const pa = -a.x + 3 * b.x - 3 * c.x + d.x;\n  const pb = 3 * a.x - 6 * b.x + 3 * c.x;\n  const pc = -3 * a.x + 3 * b.x;\n  const pd = a.x - x;\n  // eslint-disable-next-line prefer-destructuring\n  const t = solveCubic(pa, pb, pc, pd)\n    .map((root) => round(root, precision))\n    .filter((root) => root >= 0 && root <= 1)[0];\n  return cubicBezier(t, a.y, b.y, c.y, d.y);\n};\n"]},"metadata":{},"sourceType":"module"}